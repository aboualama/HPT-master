store Reaction-SMC
public function store(Request $request)

    dd($request->all());
    $rules = $this->rules();
    $rules = $rules + ['img_answers.*' => 'required|mimes:jpg,jpeg,png|max:20000',];
    $messages = $this->messages();
    $validator = Validator::make($request->all(), $rules, $messages);
    if ($validator->fails()) {
      return response()->json(['errors' => $validator->errors(), 'status' => 442]);
    }

    $record = new Question();
    $record['type'] = $request->type;
    $record->save();

    foreach(config('translatable.locales') as $lang){
      $data = $request->get($lang);
            $recordQ = new QuestionTranslation();
            $recordQ['locale'] = $lang;
            $recordQ['question'] = $data['question'];
            $recordQ['question_id'] = $record['id'];
            $recordQ->right_answers = json_encode($data['right_answers']);
            $recordQ->wrong_answers = json_encode($data['wrong_answers']);
            $recordQ->save();
    }


    $img = [];
    $index = count($request->en['right_answers']);

    for($i = 0 ; $i < $index ; $i++)
    {
      if (isset($request->file('img_answers')[$i])) {
          $image = $request->file('img_answers')[$i];
          $public_path = 'uploads/image';
          $img_name = $i . time() . '.' . $image->getClientOriginalExtension();
          $image->move($public_path , $img_name);
          $img[] = $img_name;
      }
      else {
          $img[] = 'default.jpg';
      }
    }




    $record['image'] = json_encode($img);
    $record->update();
    return response()->json(['status' => 200]);

}
